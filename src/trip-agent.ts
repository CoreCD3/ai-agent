import OpenAI from "openai";
import {availableTools, tools} from "./tools";

/**
 * Represents a weather agent that can provide weather information.
 */
export class TripAgent {
    private client: OpenAI;

    private messages = [
        {
            role: 'system',
            content: `
                    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô

                    üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
                    - ‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏£‡∏¥‡∏õ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢
                    - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Ø‡∏•‡∏Ø ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
                    - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£

                    üõ† ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:
                    - ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô estimateBudget(days, level) ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏á‡∏ö
                    - ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô createTripPlan
                    - ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á **‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î** ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

                    üó£ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
                    - ‡∏ï‡∏≠‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥)
                    - ‡πÉ‡∏ä‡πâ bullet point, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
                    - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á JSON ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏∂‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‚Äù, ‚Äú‡∏ß‡∏¥‡∏ß‡∏î‡∏µ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‚Äù

                    üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°:

                    üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô:
                    Day 1: ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ ‚Äì ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏¢‡πà‡∏≤‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô ‚Äì ‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô  
                    Day 2: ‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û ‚Äì ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‚Äì One Nimman  
                    Day 3: ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å ‚Äì ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ ‚Äì ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö

                    üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:
                    - ‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö: ~1,200
                    - ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å 2 ‡∏Ñ‡∏∑‡∏ô: ~1,000
                    - ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ + ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà: ~2,000
                    - ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á: ~500  
                    ‡∏£‡∏ß‡∏°: ~4,700 ‚úÖ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö 5,000 ‡∏ö‡∏≤‡∏ó!

                    üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:
                    - ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÑ‡∏ã‡∏Ñ‡πå‡πÅ‡∏ó‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏Å‡∏£‡πá‡∏ö
                    - ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡πÉ‡∏ô‡∏¢‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤: ONCE MORE Hostel ‡∏´‡∏£‡∏∑‡∏≠ Stay With Me`
        }
    ]

    /**
     * Creates a new instance of the WeatherAgent.
     * @param client - An instance of the OpenAI client used for processing weather-related queries.
     */
    constructor(client: OpenAI) {
        this.client = client;
    }

    /**
     * Processes a weather-related question and provides a response.
     * @param message - The weather-related question or query from the user.
     * @returns A Promise that resolves to a string containing the response to the weather query.
     */
    askQuestion = async (message: string): Promise<string> => {
        this.messages.push({ role: 'user', content: message })

        const MAX_ITERATIONS = 5;
        let iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            console.log(`Iteration: ${iterations}`)

            const response = await this.client.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: this.messages as any,
                temperature: 0.7,
                tools: tools as any,
            })


            const {finish_reason, message} =  response.choices[0]

            if (finish_reason === 'stop') {
                this.messages.push(message as any)
                return message.content ?? "I don't know"
            }

            if (finish_reason === 'tool_calls') {
                
                const call = message.tool_calls![0];
                const func = availableTools[call.function.name];
                console.log(call.function.name)
                const args = JSON.parse(call.function.arguments);
                const result = await func(...Object.values(args));
                
                this.messages.push({
                  role: 'function',
                  name: call.function.name,
                  content: typeof result === "string" ? result : JSON.stringify(result),
                }as any);
            }

            iterations++
        }

        return "Please try again with a more specific question."
    }
}